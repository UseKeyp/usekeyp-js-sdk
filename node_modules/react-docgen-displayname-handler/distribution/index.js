"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDisplayNameHandler = createDisplayNameHandler;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _reactDocgen = require("react-docgen");

var _astTypes = require("ast-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  getMemberValuePath,
  getNameOrValue,
  isExportsOrModuleAssignment
} = _reactDocgen.utils;
const DEFAULT_NAME = 'UnknownComponent';

function getNameFromPath(path) {
  var node = path.node;

  switch (node.type) {
    case _astTypes.namedTypes.Identifier.name:
    case _astTypes.namedTypes.Literal.name:
      return getNameOrValue(path);

    case _astTypes.namedTypes.MemberExpression.name:
      return _reactDocgen.utils.getMembers(path).reduce((name, {
        path,
        computed
      }) => computed && getNameFromPath(path) ? name : `${name}.${getNameFromPath(path) || ''}`, getNameFromPath(path.get('object')));

    default:
      return null;
  }
}

function getStaticDisplayName(path) {
  let displayName = null;
  const staticMember = getMemberValuePath(path, 'displayName');

  if (staticMember && _astTypes.namedTypes.Literal.check(staticMember.node)) {
    displayName = getNameFromPath(staticMember);
  }

  return displayName || null;
}

function getNodeIdentifier(path) {
  let displayName = null;

  if (_astTypes.namedTypes.FunctionExpression.check(path.node) || _astTypes.namedTypes.FunctionDeclaration.check(path.node) || _astTypes.namedTypes.ClassExpression.check(path.node) || _astTypes.namedTypes.ClassDeclaration.check(path.node)) {
    displayName = getNameFromPath(path.get('id'));
  }

  return displayName || null;
}

function getVariableIdentifier(path) {
  let displayName = null;
  let searchPath = path;

  while (searchPath !== null) {
    if (_astTypes.namedTypes.VariableDeclarator.check(searchPath.node)) {
      displayName = getNameFromPath(searchPath.get('id'));
      break;
    }

    if (_astTypes.namedTypes.AssignmentExpression.check(searchPath.node) && !isExportsOrModuleAssignment(searchPath)) {
      displayName = getNameFromPath(searchPath.get('left'));
      break;
    }

    searchPath = searchPath.parentPath;
  }

  return displayName || null;
}

function getNameFromFilePath(filePath = '') {
  let displayName = null;

  const filename = _path.default.basename(filePath, _path.default.extname(filePath));

  if (filename === 'index') {
    const parts = _path.default.dirname(filePath).split(_path.default.sep);

    displayName = parts[parts.length - 1];
  } else {
    displayName = filename;
  }

  return displayName.charAt(0).toUpperCase().concat(displayName.slice(1)).replace(/-([a-z])/, (_, match) => match.toUpperCase());
}

function createDisplayNameHandler(filePath) {
  return function displayNameHandler(documentation, path) {
    let displayName = [getStaticDisplayName, getNodeIdentifier, getVariableIdentifier].reduce((name, getDisplayName) => name || getDisplayName(path), '');

    if (!displayName) {
      displayName = getNameFromFilePath(filePath);
    }

    documentation.set('displayName', displayName || DEFAULT_NAME);
  };
}

var _default = createDisplayNameHandler('');

exports.default = _default;